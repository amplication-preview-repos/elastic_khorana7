/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProblemService } from "../problem.service";
import { ProblemCreateInput } from "./ProblemCreateInput";
import { Problem } from "./Problem";
import { ProblemFindManyArgs } from "./ProblemFindManyArgs";
import { ProblemWhereUniqueInput } from "./ProblemWhereUniqueInput";
import { ProblemUpdateInput } from "./ProblemUpdateInput";

export class ProblemControllerBase {
  constructor(protected readonly service: ProblemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Problem })
  async createProblem(
    @common.Body() data: ProblemCreateInput
  ): Promise<Problem> {
    return await this.service.createProblem({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        difficulty: true,
        likes: true,
        title: true,
        description: true,
        dislikes: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Problem] })
  @ApiNestedQuery(ProblemFindManyArgs)
  async problems(@common.Req() request: Request): Promise<Problem[]> {
    const args = plainToClass(ProblemFindManyArgs, request.query);
    return this.service.problems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        difficulty: true,
        likes: true,
        title: true,
        description: true,
        dislikes: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Problem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async problem(
    @common.Param() params: ProblemWhereUniqueInput
  ): Promise<Problem | null> {
    const result = await this.service.problem({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        difficulty: true,
        likes: true,
        title: true,
        description: true,
        dislikes: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Problem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProblem(
    @common.Param() params: ProblemWhereUniqueInput,
    @common.Body() data: ProblemUpdateInput
  ): Promise<Problem | null> {
    try {
      return await this.service.updateProblem({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          difficulty: true,
          likes: true,
          title: true,
          description: true,
          dislikes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Problem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProblem(
    @common.Param() params: ProblemWhereUniqueInput
  ): Promise<Problem | null> {
    try {
      return await this.service.deleteProblem({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          difficulty: true,
          likes: true,
          title: true,
          description: true,
          dislikes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
