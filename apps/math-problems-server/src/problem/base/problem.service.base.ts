/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Problem as PrismaProblem } from "@prisma/client";

export class ProblemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProblemCountArgs, "select">): Promise<number> {
    return this.prisma.problem.count(args);
  }

  async problems(args: Prisma.ProblemFindManyArgs): Promise<PrismaProblem[]> {
    return this.prisma.problem.findMany(args);
  }
  async problem(
    args: Prisma.ProblemFindUniqueArgs
  ): Promise<PrismaProblem | null> {
    return this.prisma.problem.findUnique(args);
  }
  async createProblem(args: Prisma.ProblemCreateArgs): Promise<PrismaProblem> {
    return this.prisma.problem.create(args);
  }
  async updateProblem(args: Prisma.ProblemUpdateArgs): Promise<PrismaProblem> {
    return this.prisma.problem.update(args);
  }
  async deleteProblem(args: Prisma.ProblemDeleteArgs): Promise<PrismaProblem> {
    return this.prisma.problem.delete(args);
  }
}
